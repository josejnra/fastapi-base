[tool.poetry]
name = "fastapi-base"
version = "0.0.1"
description = "Base project for FastAPI projects"
authors = ["Jos√© Nunes <josenunesra@gmail.com>"]
repository = "https://github.com/josejnra/fastapi-base"
homepage = "https://github.com/josejnra/fastapi-base"
documentation = "https://github.com/josejnra/fastapi-base"
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Software Development",
    "Topic :: System :: Archiving :: Packaging",
    "Topic :: System :: Installation/Setup",
    "Topic :: System :: Software Distribution",
    "Development Status :: 3 - Alpha"
]

[tool.poetry.dependencies]
python = "3.12.*"
types-python-dateutil = {version = "^2.9.0.20240316", optional = true}
types-pytz = {version ="^2024.1.0.20240417", optional = true}
types-PyYAML = {version = "^6.0.12.20240808", optional = true}
fastapi = {extras = ["standard"], version = "^0.112.0"}
pydantic-settings = "^2.4.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.32"}
alembic = "^1.13.2"
sqlmodel = "^0.0.21"
asyncpg = "^0.29.0"
faker = {extras = ["postalcode"], version = "^27.0.0"}
psycopg2-binary = "^2.9.9"
loguru = "^0.7.2"
slowapi = "^0.1.9"
redis = "^5.0.8"
opentelemetry-distro = "^0.47b0"
opentelemetry-exporter-otlp = "^1.26.0"

[tool.poetry.extras]
dev_types = ["types-python-dateutil", "types-pytz", "types-PyYAML"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"
mypy = "^1.11.1"
faker = "^27.0.0"
taskipy = "^1.13.0"
ruff = "^0.6.0"
pytest-asyncio = "^0.23.8"
aiosqlite = "^0.20.0"
sqlalchemy-data-model-visualizer = "^0.1.3"
graphviz = "^0.20.3"

[tool.ruff]
line-length = 88
extend-exclude = ["migrations"]
cache-dir = "/tmp/.ruff_cache"
exclude = ["alembic"]

[tool.ruff.lint]
preview = true
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
    "PL",  # pylint
    "PT",  # flake8-pytest-style
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
preview = true
quote-style = "double"
docstring-code-format = true

[tool.mypy]
exclude = [
    "migrations",
    "test_redis_async.py",
    "generate_er_diagram.py"
]
cache_dir = "/tmp/.mypy_cache"

[tool.taskipy.tasks]
lint = 'ruff check . && ruff check . --diff'
format = 'ruff check . --fix && ruff format .'
pre_test = "task lint"
test = "pytest --cov --cov-branch --cov-fail-under=75 --cov-report term --cov-report xml:coverage.xml"
post_test = "coverage html"
run = "fastapi dev app/main.py --port 8000"

[tool.pytest.ini_options]
cache_dir = "/tmp/.pytest_cache"
addopts = "-s -x -vv"
testpaths = [
    "tests"
]
asyncio_mode = "auto"

[tool.coverage.html]
directory = "/tmp/htmlcov"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
